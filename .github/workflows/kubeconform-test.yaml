name: kubeconform

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      manifest_file:
        description: 'Path to specific manifest file for validation'
        required: false

permissions:
  contents: read

jobs:
  kubeconform:
    name: Test using kubeconform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get changed YAML files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
              changed=$(git diff --name-only HEAD^1 HEAD | grep -E '\.ya?ml$' || echo "")
          else
              changed=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -E '\.ya?ml$' || echo "")
          fi
          echo "Changed files:"
          echo "$changed"
          echo "changed_files=$changed" >> $GITHUB_ENV

      - name: Debug changed files
        run: |
          echo "Files passed to kubeconform:"
          echo "${{ env.changed_files }}"

      - name: Set up Kubeconform
        uses: bmuschko/setup-kubeconform@v1

      - name: Validate manifests
        id: validate
        run: |
          if [ -z "${{ env.changed_files }}" ]; then
            echo "No YAML files to validate."
            echo "CHECK_OUTPUT=Summary: 0 resources found in 0 files - Valid: 0, Invalid: 0, Errors: 0, Skipped: 0" >> $GITHUB_ENV
            exit 0
          fi

          TOTAL_FILES=0
          VALID_COUNT=0
          INVALID_COUNT=0
          ERROR_COUNT=0
          SKIPPED_COUNT=0
          CHECK_OUTPUT=""

          for file in ${{ env.changed_files }}; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              TOTAL_FILES=$((TOTAL_FILES + 1))
              output=$(kubeconform -schema-location default --summary "$file" 2>&1)
              echo "$output"

              if echo "$output" | grep -q "failed validation"; then
                CHECK_OUTPUT="$CHECK_OUTPUT\n$file - failed validation:\n$output"
              else
                CHECK_OUTPUT="$CHECK_OUTPUT\n$file:\n$output"
              fi

              valid=$(echo "$output" | grep -oP '(?<=Valid: )\d+' || echo 0)
              invalid=$(echo "$output" | grep -oP '(?<=Invalid: )\d+' || echo 0)
              errors=$(echo "$output" | grep -oP '(?<=Errors: )\d+' || echo 0)
              skipped=$(echo "$output" | grep -oP '(?<=Skipped: )\d+' || echo 0)

              VALID_COUNT=$((VALID_COUNT + valid))
              INVALID_COUNT=$((INVALID_COUNT + invalid))
              ERROR_COUNT=$((ERROR_COUNT + errors))
              SKIPPED_COUNT=$((SKIPPED_COUNT + skipped))
            else
              echo "File $file does not exist"
            fi
          done

          SUMMARY="Summary: $TOTAL_FILES resources found in $TOTAL_FILES files - Valid: $VALID_COUNT, Invalid: $INVALID_COUNT, Errors: $ERROR_COUNT, Skipped: $SKIPPED_COUNT"
          CHECK_OUTPUT="$CHECK_OUTPUT\n$SUMMARY"

          echo "CHECK_OUTPUT=$CHECK_OUTPUT" >> $GITHUB_ENV
          echo "::set-output name=CHECK_OUTPUT::$CHECK_OUTPUT"

          if [ $INVALID_COUNT -gt 0 ] || [ $ERROR_COUNT -gt 0 ]; then
            exit 1
          fi

  notification:
    needs: kubeconform
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: slack-notifi-train
          SLACK_COLOR: ${{ job.status == 'success' && '#36a64f' || '#FF0000' }}
          SLACK_MESSAGE: ${{ needs.kubeconform.outputs.CHECK_OUTPUT }}
          SLACK_TITLE: Kubeconform Validation Results
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

